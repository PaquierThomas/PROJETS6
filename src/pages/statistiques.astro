---
type Party = {
  id: string;
  partie_text: string;
  totalChoix: number;
  choix: { id: string; text: string; total: number }[];
};

const parties = (await fetch(
  "http://localhost:4000/api/stats-embranchements"
).then((res) => res.json())) as Party[];

import "../styles/global.css";
---

<style scoped>
  nav {
    position: absolute;
    display: flex;
    left: 0;
    right: 0;
    justify-content: space-between;
    align-items: center;
    padding: 30px 40px;
    z-index: 10;
    color: #ffffff;
    font-family: "Bebas Neue", sans-serif;
    font-size: 25px !important;
  }

  nav img {
    height: 40px;
  }

  nav ul {
    display: flex;
    align-items: center;
    list-style-type: none;
    margin: 0;
    padding: 0;
    padding-right: 30px;
    gap: 40px;
    font-size: 25px !important;
  }

  nav ul li {
    margin-left: 20px;
  }

  nav ul li a,
  nav div a {
    color: rgba(255, 255, 255, 0.8);
    text-decoration: none;
    transition: all 0.2s ease-in-out;
  }

  nav div a {
    color: white;
  }

  nav ul li a:hover {
    color: white;
  }
  .isolated {
    color: rgba(255, 255, 255, 0.85) !important;
    background-color: #b53926;
    padding: 7px 14px;
    transition: all 0.2s ease-in-out;
  }
  .isolated:hover {
    color: white !important;
  }

  #connexionLink {
    color: rgba(255, 255, 255, 0.85) !important;
    background-color: rgb(181, 57, 38);
    padding: 7px 14px;

    transition: all 0.2s ease-in-out;
  }
  #connexionLink:hover {
    color: white !important;
    cursor: pointer;
    background: #a23322;
    a {
      color: white !important;
    }
  }

  /* Importation de la police Bebas Neue */
  @import url("https://fonts.googleapis.com/css2?family=Bebas+Neue&display=swap");
  #blanco hr {
    border: 0;
    height: 3px;
    background-color: #cd412b;
    margin-top: -5px;
    margin-bottom: 10px;
    color: white;
  }
  #blanco a {
    color: white;
  }

  .profil {
    background: #1b1b1b;
    color: rgba(255, 255, 255, 0.7);
    border: rgb(76, 73, 70) 2px solid;
    padding: 0 10px;
    /* padding-bottom: -10px; */
    height: 40px;
    background-image: url("/images/noise.webp");
  }
  .profil:hover {
    color: white;
    background: #4c4946;
  }
  a {
    text-decoration: none;
    color: rgba(255, 255, 255, 0.85);
  }
  a:nth-child(2) {
    color: rgba(255, 255, 255, 0.7);
  }
  /* Style pour la flexbox */
  /* Style pour la flexbox */
  .container {
    display: flex;
    flex-direction: column; /* Alignement en colonne */
    align-items: center; /* Centrage horizontal */
    position: absolute;
    top: 75px;
    left: -400px;
    gap: 150px; /* Réduire l'espacement entre les images */
  }

  .container2 {
    display: flex;
    flex-direction: column; /* Alignement en colonne */
    align-items: center; /* Centrage horizontal */
    position: absolute;
    top: 75px;
    right: -400px;
    gap: 150px; /* Réduire l'espacement entre les images */
  }

  /* Style pour les images */

  body {
    background: #181930;
    color: #ffffff;
    font-family: var(--font-sego);
    margin: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
    background-image: url("/images/noise.webp");
  }

  /* img {
    width: 400px;
    height: 400px;
    position: absolute;
    top: 0%;
    right: 45%;
    color: black;
    fill: black;
  } */
  h1 {
    font-size: 80px;
    width: 50vw;
    line-height: 1.1;
    text-align: center;
    margin-bottom: 70px;
    font-weight: bold;
    margin-top: 100px;
  }

  span span {
    font-weight: bold;
    color: #ec1c24;
  }

  p {
    font-size: 30px;
    margin-bottom: 20px;
    width: 50vw;
    line-height: 1.2;
    text-align: center;
  }
  h2 {
    font-size: 25px;
    font-weight: 600;
    margin-bottom: 10px;
    display: flex;
    justify-content: center;

    span {
      font-weight: 400;
      margin-left: 5px;
      color: #ffffff;
    }
  }

  ul {
    list-style: none;
    font-size: 20px;
    padding: 0;
    display: flex;
    flex-direction: row;
    justify-content: center;
    gap: 25%;

    color: rgba(159, 159, 159, 0.9);

    span {
      color: #ffffff;
    }
  }
  .isolated-ul {
    display: flex;
    align-self: center;
    justify-content: center;
    width: 100%;
    font-size: 25px;
    color: #ec1c24;
  }
  .isolated,
  ul {
    padding: calc(65px / 2);
  }
  li span {
    font-weight: bold;
  }
  #logo {
    display: flex;
    align-items: center;
    gap: 10px;
    text-decoration: none;
    color: white;
    h2 {
      font-size: 25px;
    }
    img {
      margin-top: -10px;
    }
  }

  /* Styles CSS pour la mise en forme des statistiques */
  .embranchement-stats {
    margin-bottom: 20px;
  }

  .embranchement-stats h3 {
    font-size: 20px;
    margin-bottom: 10px;
  }

  .embranchement-stats p {
    margin: 5px 0;
    color: rgb(236, 28, 36);
  }

  @media (min-width: 1400px) {
    #connexionLink {
      height: 34px;
      position: relative;
      display: flex;
      padding-top: 4px;
    }
    #blanco hr {
      margin-top: -5px;
      margin-bottom: 10px;
    }
    #blanco {
      margin-top: 10px;
    }
    H1 {
      font-size: 50px;
      margin-top: 8%;
    }
    p {
      font-size: 20px;
    }
    .embranchement-stats h3 {
      font-size: 20px;
    }
    .part {
      font-size: 20px;
      width: 70vw;
      text-align: center;
      line-height: 1.2;
    }
    .isolated {
      margin-left: 120px;
    }
  }
</style>

<script>
  const svgs = [
    "/images/symbols/alien.svg",
    "/images/symbols/grave.svg",
    "/images/symbols/robot.svg",
    "/images/symbols/ovni.svg",
    "/images/symbols/hand.svg",
    "/images/symbols/story/unknow.svg",
    "/images/symbols/story/walle.svg",
  ];

  function choisirSVGAléatoire() {
    const index = Math.floor(Math.random() * svgs.length);
    return svgs[index];
  }

  // Récupérer le conteneur pour les images
  const container = document.getElementById("random-images-container");
  const container1 = document.getElementById("random-images-container1");

  // Afficher toutes les images aléatoires dans les deux conteneurs
  svgs.forEach((svgSrc) => {
    const svgContainer = document.createElement("div");
    svgContainer.classList.add("svg-container");

    const svgElement = document.createElement("object");
    svgElement.type = "image/svg+xml";
    svgElement.data = svgSrc;

    svgContainer.appendChild(svgElement);

    container.appendChild(svgContainer.cloneNode(true)); // Clone l'image pour le premier conteneur
    container1.appendChild(svgContainer.cloneNode(true)); // Clone l'image pour le deuxième conteneur
  });

  // Sélectionner tous les conteneurs SVG
  const svgContainers = document.querySelectorAll(".svg-container");

  // Parcourir chaque conteneur SVG
  svgContainers.forEach((container) => {
    // Sélectionner l'élément object à l'intérieur du conteneur
    const objectElement = container.querySelector("object");

    // Ajouter un écouteur d'événement pour charger le SVG
    objectElement.addEventListener("load", function () {
      // Sélectionner le document à l'intérieur de l'élément object
      const svgDocument = objectElement.contentDocument;

      // Vérifier si le document est chargé et que l'élément <svg> existe
      if (svgDocument && svgDocument.querySelector("svg")) {
        // Sélectionner l'élément <svg> dans le document SVG chargé
        const svg = svgDocument.querySelector("svg");

        // Définir la taille de l'élément <svg>
        svg.setAttribute("width", "700px");
        svg.setAttribute("height", "700px");

        svg.setAttribute("fill", "rgba(181, 57, 38, 0.4)");
        svg.setAttribute("z-index", "-100");
      }
    });
  });

  // Fonction pour vérifier si l'utilisateur est connecté
  async function checkUserAuthentication() {
    try {
      console.log("Vérification de l'authentification de l'utilisateur...");
      const response = await fetch("http://localhost:4000/api/verify-login", {
        credentials: "include",
      });
      console.log("Réponse reçue :", response);
      const data = await response.json();
      console.log("Données reçues :", data);

      if (response.ok) {
        console.log("L'utilisateur est connecté !");
        // Afficher le lien profil et masquer le lien connexion
        document.getElementById("connexionLink").style.display = "none";
        document.getElementById("profilLink").style.display = "block";
      } else {
        console.error("L'utilisateur n'est pas authentifié :", data.message);
      }
    } catch (error) {
      console.error(
        "Erreur lors de la vérification de l'authentification :",
        error
      );
    }
  }

  // Appeler la fonction pour vérifier l'authentification de l'utilisateur
  checkUserAuthentication();
</script>

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Statistics</title>
  </head>

  <body>
    <!-- Nav -->
    <nav>
      <div>
        <a id="logo" href="/"
          ><img src="/icons/logo.svg" alt="logo" /><h2>
            An Enshrouded Encounter
          </h2></a
        >
      </div>
      <ul>
        <li><a href="/story">Story</a></li>
        <li><a href="/characters">Characters</a></li>
        <li id="blanco"><a href="/statistiques">Statistics</a><hr /></li>
        <li id="connexionLink">
          <a href="/connexion">Connexion</a>
        </li>
        <li id="profilLink" class="profil" style="display:none;">
          <a href="/utilisateur">Profile</a>
        </li>
      </ul>
    </nav>

    <div class="container" id="random-images-container">
      <!-- Les images seront ajoutées ici par JavaScript -->
    </div>
    <div class="container2" id="random-images-container1">
      <!-- Les images seront ajoutées ici par JavaScript -->
    </div>
    <h1 class="title">Statistics on player choices</h1>
    <div>
      {
        parties.map((p) => (
          <div>
            <h2 class="part">
              {p.partie_text}
              <span>
                <span>{p.totalChoix}</span>{" "}
                {p.totalChoix ? "choix effectués" : "choix effectué"}
              </span>
            </h2>
            {p.totalChoix ? (
              <ul>
                {p.choix.map((c) => (
                  <li>
                    {c.text}:{" "}
                    <span>
                      {(c.total / p.totalChoix).toLocaleString("fr", {
                        style: "percent",
                      })}
                    </span>
                  </li>
                ))}
              </ul>
            ) : (
              <p class="isolated">Cet embranchement n'a jamais été parcouru</p>
            )}
          </div>
        ))
      }
    </div>
  </body>
</html>
